# -*- coding: utf-8 -*-
"""VGG16 Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OcV2Sdm_I9ItHfd1sSLtuiVJ9aSoPLdG

"""

# Import tensorflow and matplotlib
import tensorflow as tf

from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt

# Get the training and testing images from the CIFAR-10 dataset
(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()

# Normalize pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0

# build VGG16 with tensorflow.keras
# Sequential model is used
model = models.Sequential()

# Add 2 Conv2D layers with 64 3x3 filters, relu activation function, same padding, and input shape set to handle the CIFAR-10 dataset images
# Max pooling layers all have 2x2 filters and stides of 2
model.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
model.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2), strides=(2, 2)))

# Add 2 Conv2D layers with 128 3x3 filters, relu activation function, same padding, and input shape set to handle the CIFAR-10 dataset images
model.add(layers.Conv2D(128, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
model.add(layers.Conv2D(128, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2), strides=(2, 2)))

# Add 3 Conv2D layers with 256 3x3 filters, relu activation function, same padding, and input shape set to handle the CIFAR-10 dataset images
model.add(layers.Conv2D(256, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
model.add(layers.Conv2D(256, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
model.add(layers.Conv2D(256, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2), strides=(2, 2)))

# Add 3 Conv2D layers with 512 3x3 filters, relu activation function, same padding, and input shape set to handle the CIFAR-10 dataset images
model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2), strides=(2, 2)))

# Add 3 Conv2D layers with 512 3x3 filters, relu activation function, same padding, and input shape set to handle the CIFAR-10 dataset images
model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
model.add(layers.Conv2D(512, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2), strides=(2, 2)))

# Flatten the layers
# Add three fully connected layers 
# First two have 4096 units
# Last layer has 10 units since CIFAR-10 dataset has 10 classes
model.add(layers.Flatten())
model.add(layers.Dense(4096, activation='relu'))
model.add(layers.Dense(4096, activation='relu'))
model.add(layers.Dense(10))

model.summary()

# Compile the model using SGD optimizer and cross entropy loss function
model.compile(optimizer='SGD',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# Train the network across 10 epochs
history = model.fit(train_images, train_labels, epochs=10, 
                    validation_data=(test_images, test_labels))

# Plot accuracy wrt epochs
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(loc='lower right')
plt.show()
print()

# Plot loss wrt to epochs
plt.plot(history.history['loss'], label='loss')
plt.plot(history.history['val_loss'], label = 'val_loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(loc='lower right')
plt.show()

# Evaluate the model
test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)

# Print the final accuracy
print("\nTesting Accuraccy: ", test_acc * 100, '%')